## definition for plot 8
# set the model, run and group constraints
model:
    calliope_version: 0.6.10
    name: 'building_energy_hub'
    timeseries_data: {} # large brackets stands for dictionary. This needs to be kept empty to accept timeseries_dataframes=dict in calliope.Model
    time:
        function: 'resample'
        function_options:
            resolution: '1D' # other options: '1H', '1D', '1W', '1M'

group_constraints:
   # A constraint group to apply a systemwide CO2 cap
   systemwide_co2_cap:
       cost_max:
           co2: 1000000000 # NOTE: leave this empty to apply co2 constarints from the config

tech_groups:
    supply:
        costs:
            monetary:
                interest_rate: 0.05
            co2:
                interest_rate: 0

    conversion:
        costs:
            monetary:
                interest_rate: 0.05
            co2:
                interest_rate: 0

    storage:
        costs:
            monetary:
                interest_rate: 0.05
            co2:
                interest_rate: 0

    conversion_plus:
        costs:
            monetary:
                interest_rate: 0.05
            co2:
                interest_rate: 0

    supply_for_pv:
        essentials:
            parent: supply
            carrier_out: electricity
        constraints:
            resource: df=supply_PV
            force_resource: True
            resource_unit: energy_per_area
            resource_area_per_energy_cap: 5
            export_carrier: electricity
            lifetime: 27
        costs:
            monetary:
                purchase: 1
                export: -0.1272
            co2:
                energy_cap: 1250

    district_heating_techs:
        essentials:
            parent: conversion
            carrier_in: DH
            carrier_out: heat_85
        constraints:
            energy_eff: 0.95
            lifetime: 30
        costs:
            monetary:
                om_annual: 150
            co2:
                energy_cap: 4.771

    ASHP:
        essentials:
            parent: conversion
            carrier_in: electricity
            color: '#107c41'
        constraints:
            energy_cap_min: 1
            energy_cap_max: 200
            lifetime: 18
        costs:
            monetary:
                energy_cap: 1814.5
                purchase: 12655
                om_annual: 4.64
            co2:
                energy_cap: 45.9
    
    GSHP:
        essentials:
            parent: conversion
            carrier_in: electricity
            color: '#107c46'
        constraints:
            energy_cap_min: 5
            energy_cap_max: 1000
            lifetime: 20
        costs:
            monetary:
                energy_cap: 2544.9
                purchase: 37064
                om_annual: 11.57
            co2:
                energy_cap: 36.3

    water_tank:
        essentials:
            parent: storage
        constraints:
            storage_cap_max: 1000
            storage_initial: 0.5
            lifetime: 23
        costs:
            monetary:
                storage_cap: 13
                om_annual_investment_fraction: 0.015
            co2:
                storage_cap: 7

run:
    backend: pyomo
    cyclic_storage: True # If True, storage in the last timestep of the timeseries is considered to be the ‘previous timestep’ in the first timestep of the timeseries
    ensure_feasibility: True # If true, unmet_demand will be a decision variable, to account for an ability to meet demand with the available supply. If False and a mismatch occurs, the optimisation will fail due to infeasibility
    mode: plan # plan (plan+operate), operate (operate only), spores (sensitivity analysis)
    objective_options:
        cost_class:
            co2: 0
            monetary: 1
        sense: minimize
    # operation: {}
    # spores_ioptions: {}
    # save_logs: './logs'
    solver: glpk # solver to use. This will be overwritten by the script so keep it empty
#    solver_options: # advanced settings, see calliope documentation for more details
#        presolve: 0
#     ensure_feasibility: true
#    relax_constraint: # Enable relaxing some equality constraints to be min/max constraints. The extent of relaxation is given as a fraction.
#        demand_share_per_timestep_decision_main_constraint: 0.01



# locations: leave blank because location will be assigned later in the script.
# tech definition here will overwrite the default tech definition below

techs: {} # only general tech definition. 
    # # supply, conversion, storage techs will be read from the excel