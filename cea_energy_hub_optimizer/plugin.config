# config file must follow kebab-case, and then will be translated in python to be called with snake_case
# addtionally, here I use singular form for the name of the keys.
[energy-hub-optimizer]

buildings =
buildings.type = BuildingsParameter
buildings.help = List of buildings to create schedules for (leave blank to consider all).

solver = glpk
solver.type = ChoiceParameter
solver.choices = cplex, gurobi, glpk
solver.help = The optimization solver to use. glpk is free and does not need installation, but is very slow in large problems. 
                cplex and gurobi are commercial solvers and need to be installed separately and make sure that they are registered in PATH.

# optimization settings
number-of-epsilon-cut = 5
number-of-epsilon-cut.type = IntegerParameter
number-of-epsilon-cut.help = Defines how many epsilon cuts are made between cost and emission optimal points along the pareto front. For example, if set to 5, 
                                the optimizer will calculate the cost optimal solution, the emission optimal solution, and 5 epsilon cuts in between. 
                                In total, there will be 7 solutions to be calculated.
                                If approach-but-not-land-on-tip is set to true, two more epsilon cuts will be added to the list of epsilon cuts, 
                                which brings the total number of solutions to 9 and increase the calculation time.
number-of-epsilon-cuts.category = Optimization Settings

approach-but-not-land-on-tip = false
approach-but-not-land-on-tip.type = BooleanParameter
approach-but-not-land-on-tip.help = if true, two more epsilon cuts will be added to the list of epsilon cuts, one very close to the cost optimal
                                    solution and one very close to the emission optimal solution. This is to prevent unrealistic solution that 
                                    completely ignore one of the objectives. In the result file, this will also add two rows of data.
approach-but-not-land-on-tip.category = Optimization Settings

approach-percentile = 0.01
approach-percentile.type = RealParameter
approach-percentile.help = the percentile of the epsilon cut that is very close to the cost optimal solution and the emission optimal solution.
                            e.g. 0.01 means that the constraint is 1 percent more tight than the next epsilon cut.
                            For example, if cost-optimal has emission 500, emission-optimal has emission 200, and we have two epsilon cuts in between,
                            So inbetween every epsilon cut we have 100 emission difference. If approach-percentile is set to 0.01, 
                            then the epsilon cut next to cost optimal will be optimized with emission<=200+100*0.01 which is 201.
approach-percentile.category = Optimization Settings

skip-done-building = false
skip-done-building.type = BooleanParameter
skip-done-building.help = if true, the optimizer will skip the buildings that already have a result file in the result path.
skip-done-building.category = Optimization Settings

get-current-solution = false
get-current-solution.type = BooleanParameter
get-current-solution.help = if true, the optimizer will optimize using no other technology but the current one that is used in the building.
                            For example, if a building is currently using oil boiler, the optimizer will only optimize using oil boiler to satisfy all the energy demands.
                            By default, the building has ASHP for cooling, and no PV/PVT/SC panels. It also has no battery or thermal storage.
get-current-solution.category = Optimization Settings

# preprocess timeseries data
flatten-spike = true
flatten-spike.type = BooleanParameter
flatten-spike.help = if true, the highest part of the hourly demand profile will be flattened, to avoid unrealistic sizing.
flatten-spike.category = Preprocess Timeseries Data

flatten-spike-percentile = 0.02
flatten-spike-percentile.type = RealParameter
flatten-spike-percentile.help = the highest part of hourly demand profile that is flattened, to avoid unrealistic sizing. 
                                e.g. 0.02 means that the highest 2 percent of the hourly demand profile is flattened.
                                Notice that only if flatten-spike is set to true, this parameter will be considered.
flatten-spike-percentile.category = Preprocess Timeseries Data

# debugging settings
save-constraint-to-lp = false
save-constraint-to-lp.type = BooleanParameter
save-constraint-to-lp.help = if true, the mathematical constraints of the optimization problem will be saved to the result path as a .lp file. 
                                This is useful to check if the constraints are mathematically correct.
save-constraint-to-lp.category = Debugging Settings

save-energy-hub-to-yaml = false
save-energy-hub-to-yaml.type = BooleanParameter
save-energy-hub-to-yaml.help = if true, the specific configuration of the energy hub will be saved to the result path as a .yaml file.
save-energy-hub-to-yaml.category = Debugging Settings

save-result-to-nc = false
save-result-to-nc.type = BooleanParameter
save-result-to-nc.help = if true, the result of each single optimization will be saved to the result path as a .nc file.
save-result-to-nc.category = Debugging Settings